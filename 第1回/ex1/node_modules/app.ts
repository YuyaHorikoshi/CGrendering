///<reference path="./node_modules/@types/three/index.d.ts"/>
class ThreeJSTest {
    private scene: THREE.Scene;
    private camera: THREE.Camera;
    private renderer: THREE.WebGLRenderer;
    private geometry: THREE.Geometry;
    private material: THREE.Material;
    private cube: THREE.Mesh;
    private light: THREE.Light;
    private screenWidth: number = 640;
    private screenHeight: number = 480;
    private planeGeometry: THREE.PlaneGeometry;
    private planeMaterial: THREE.Material;
    private plane: THREE.Mesh;

constructor() {
    this.createRenderer();
    this.createScene();
}

private createRenderer() {
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(this.screenWidth, this.screenHeight);
    this.renderer.setClearColor(new THREE.Color(0x495ed));
    this.renderer.shadowMap.enabled = true; 
    document.body.appendChild(this.renderer.domElement);
}

private createScene() {
    //シーンの作成
    this.scene = new THREE.Scene();

    //カメラの作成
    this.camera = new THREE.PerspectiveCamera(45, this.screenWidth / this.screenHeight, 0.1, 1000);
    this.camera.position.x = -30;
    this.camera.position.y = 40;
    this.camera.position.z = 30;
    this.camera.lookAt(new THREE.Vector3(0, 0, 0));

    //ライトの作成
    this.light = new THREE.SpotLight(0xffffff);
    this.light.position.set(-20, 30, -5);
    this.light.castShadow = true;

    // Cubeの作成
    this.geometry = new THREE.BoxGeometry(3, 3, 3);
    this.material = new THREE.MeshLambertMaterial({ color: 0x55ff00 });
    this.cube = new THREE.Mesh(this.geometry, this.material);
    this.cube.position.y = 3;
    this.cube.castShadow = true; 

    // 平面の作成
    this.planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);
    this.planeMaterial = new THREE.MeshLambertMaterial({ color: 0xffffff });
    this.plane = new THREE.Mesh(this.planeGeometry, this.planeMaterial);
    this.plane.rotation.x = -Math.PI / 2;
    this.plane.position.y = 0;
    this.plane.receiveShadow = true; //影の追加
    this.scene.add(this.camera);
this.scene.add(this.light);
this.scene.add(this.plane);
this.scene.add(this.cube);
}

public render() {
    this.cube.rotation.x += 0.02;
    this.cube.rotation.y += 0.02;
    this.renderer.render(this.scene, this.camera);
    requestAnimationFrame(this.render.bind(this));
}

}
window.onload = () => {
var threeJSTest = new ThreeJSTest();
threeJSTest.render();
};